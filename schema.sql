DROP SCHEMA IF EXISTS lab_tracker_group_10 CASCADE;

CREATE SCHEMA lab_tracker_group_10;

SET search_path TO lab_tracker_group_10;

DROP TABLE IF EXISTS LAB_PROGRESS_LOG CASCADE;
DROP TABLE IF EXISTS LAB_PROGRESS CASCADE;
DROP TABLE IF EXISTS SECTION_LAB CASCADE;
DROP TABLE IF EXISTS LAB CASCADE;
DROP TABLE IF EXISTS SECTION CASCADE;
DROP TABLE IF EXISTS COURSE CASCADE;
DROP TABLE IF EXISTS STUDENT CASCADE;
DROP TABLE IF EXISTS INSTRUCTOR CASCADE;
DROP TABLE IF EXISTS USER_ CASCADE; 

-- === DOMAIN DEFINITIONS ===
CREATE DOMAIN COURSE_CODE AS VARCHAR(10)
    CHECK (VALUE ~ '^[A-Z]{4}[0-9]{3,4}$');  

CREATE DOMAIN USER_ROLE_TYPE AS VARCHAR(20)
    CHECK (UPPER(VALUE) IN ('ADMIN', 'INSTRUCTOR', 'STUDENT', 'TA', 'SYSTEM'));

CREATE DOMAIN USERNAME AS VARCHAR(50)
    CHECK (VALUE <> '');

CREATE DOMAIN LOCATION AS VARCHAR(50);

CREATE DOMAIN PROGRESS_STATUS AS VARCHAR(20)
    CHECK (VALUE IN ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED'));

CREATE DOMAIN TERM_NAME_TYPE AS VARCHAR(20)
  CHECK (VALUE ~ '^(Winter|Spring|Summer|Fall|Spring/Summer) [0-9]{4}$');

CREATE TABLE COURSE (
    CRS_CODE COURSE_CODE PRIMARY KEY,
    CRS_TITLE VARCHAR(100) NOT NULL,
    CRS_CREDITS NUMERIC(3,1)
);

CREATE TABLE TERM (
    TERM_CODE VARCHAR(20) PRIMARY KEY,
    TERM_NAME TERM_NAME_TYPE UNIQUE NOT NULL,
    TERM_START_DATE DATE NOT NULL,
    TERM_END_DATE DATE NOT NULL, 
    CHECK (TERM_END_DATE > TERM_START_DATE)
);

CREATE TABLE SECTION (
    SEC_CODE VARCHAR(10) PRIMARY KEY,
    SEC_LEVEL VARCHAR(10) NOT NULL,
    SEC_SET   VARCHAR(10) NOT NULL,
    SEC_LOCATION LOCATION NOT NULL,
    SEC_DAY_OF_WEEK VARCHAR(10),
    SEC_START_TIME TIME,
    SEC_END_TIME TIME, 
    TERM_CODE VARCHAR(20) NOT NULL REFERENCES TERM(TERM_CODE),
    CRS_CODE COURSE_CODE NOT NULL REFERENCES COURSE(CRS_CODE)
);

CREATE TABLE LAB (
    LAB_ID SERIAL PRIMARY KEY,
    LAB_TITLE VARCHAR(100) NOT NULL,
    LAB_ASSIGNMENT_ID VARCHAR(100)
);

CREATE TABLE SECTION_LAB (
    SEC_CODE VARCHAR(10) REFERENCES SECTION(SEC_CODE) ON DELETE CASCADE,
    LAB_ID INT REFERENCES LAB(LAB_ID) ON DELETE CASCADE,
    SEC_LAB_START TIMESTAMP,
    SEC_LAB_END TIMESTAMP,
    SEC_LAB_DUE TIMESTAMP,
    SEC_LAB_LOCATION LOCATION,
    PRIMARY KEY (SEC_CODE, LAB_ID)
);

CREATE TABLE USER_ (
    USER_ID VARCHAR(50) PRIMARY KEY,
    USER_ROLE USER_ROLE_TYPE NOT NULL,
    USER_FNAME VARCHAR(50) NOT NULL,
    USER_LNAME VARCHAR(50) NOT NULL,
    USER_EMAIL VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE INSTRUCTOR (
    USER_ID VARCHAR(50) PRIMARY KEY REFERENCES USER_(USER_ID) ON DELETE CASCADE,
    INSTRUCTOR_HIRE_DATE DATE
);

CREATE TABLE STUDENT (
    USER_ID VARCHAR(50) PRIMARY KEY REFERENCES USER_(USER_ID) ON DELETE CASCADE,
    STUDENT_NUMBER VARCHAR(15) UNIQUE
);

CREATE TABLE LAB_PROGRESS (
    PROG_ID VARCHAR(20) PRIMARY KEY,
    SEC_CODE VARCHAR(10) NOT NULL,
    LAB_ID INT NOT NULL,
    STUDENT_ID VARCHAR(50) NOT NULL,
    PROG_ATTENDANCE BOOLEAN DEFAULT FALSE,
    PROG_STATUS PROGRESS_STATUS DEFAULT 'NOT_STARTED',
    PROG_PREPARED BOOLEAN DEFAULT FALSE,
    PROG_SUBMISSION_LINK VARCHAR(100),
    PROG_SUBMISSION_TIMESTAMP TIMESTAMP NULL,
    PROG_REEVALUATION_LINK VARCHAR(100),
    PROG_REEVALUATION_TIMESTAMP TIMESTAMP NULL,
    PROG_INSTRUCTOR_ASSESSMENT FLOAT,
    PROG_SELF_ASSESSMENT FLOAT,
    PROG_LATE BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (SEC_CODE, LAB_ID) REFERENCES SECTION_LAB(SEC_CODE, LAB_ID) ON DELETE CASCADE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(USER_ID) ON DELETE CASCADE
);


CREATE TABLE LAB_PROGRESS_LOG (
    PROGLOG_ID SERIAL PRIMARY KEY,
    PROG_ID VARCHAR(20) NOT NULL REFERENCES LAB_PROGRESS(PROG_ID) ON DELETE CASCADE,
    CHANGED_BY VARCHAR(50) REFERENCES USER_(USER_ID),
    FIELD_NAME VARCHAR(50) NOT NULL,
    OLD_VALUE FLOAT,
    NEW_VALUE FLOAT,
    NOTES VARCHAR(200),
    CHANGE_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);